<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FaceRecognitionDotNet</name>
    </assembly>
    <members>
        <member name="T:FaceRecognitionDotNet.DisposableObject">
            <summary>
            Represents a class which has managed or unmanaged resources.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.DisposableObject.IsDisposed">
            <summary>
            Gets a value indicating whether this instance has been disposed.
            </summary>
            <returns>true if this instance has been disposed; otherwise, false.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.DisposableObject.ThrowIfDisposed">
            <summary>
            If this object is disposed, then <see cref="T:System.ObjectDisposedException"/> is thrown.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.DisposableObject.DisposeManaged">
            <summary>
            Releases all managed resources.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.DisposableObject.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.DisposableObject.Dispose">
            <summary>
            Releases all resources used by this <see cref="T:FaceRecognitionDotNet.DisposableObject"/>.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.DisposableObject.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this <see cref="T:FaceRecognitionDotNet.DisposableObject"/>.
            </summary>
            <param name="disposing">Indicate value whether <see cref="M:System.IDisposable.Dispose"/> method was called.</param>
        </member>
        <member name="T:FaceRecognitionDotNet.Extensions.AgeEstimator">
            <summary>
            An abstract base class that provides functionality to estimate human age from face image.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.Extensions.AgeEstimator.Groups">
            <summary>
            Gets the collection of age group this estimator returns in derived classes.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.AgeEstimator.RawPredict(DlibDotNet.MatrixBase,FaceRecognitionDotNet.Location)">
            <summary>
            Returns an index of age group of face image correspond to specified location in specified image.
            </summary>
            <param name="matrix">The matrix contains a face.</param>
            <param name="location">The location rectangle for a face.</param>
            <returns>An index of age group of face image correspond to specified location in specified image.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.AgeEstimator.RawPredictProbability(DlibDotNet.MatrixBase,FaceRecognitionDotNet.Location)">
            <summary>
            Returns probabilities of age group of face image correspond to specified location in specified image.
            </summary>
            <param name="matrix">The matrix contains a face.</param>
            <param name="location">The location rectangle for a face.</param>
            <returns>Probabilities of age group of face image correspond to specified location in specified image.</returns>
        </member>
        <member name="T:FaceRecognitionDotNet.Extensions.AgeRange">
            <summary>
            Represents a range that has start and end age.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.AgeRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Instantiates a new <see cref="T:FaceRecognitionDotNet.Extensions.AgeRange"/> instance with the specified starting and ending ages.
            </summary>
            <param name="start">The inclusive age index of the range.</param>
            <param name="end">The exclusive end age of the range.</param>
        </member>
        <member name="P:FaceRecognitionDotNet.Extensions.AgeRange.End">
            <summary>
            Gets an age that represents the exclusive end of the range.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.Extensions.AgeRange.Start">
            <summary>
            Gets the inclusive start of the <see cref="T:FaceRecognitionDotNet.Extensions.AgeRange"/>.
            </summary>
        </member>
        <member name="T:FaceRecognitionDotNet.Extensions.EmotionEstimator">
            <summary>
            An abstract base class that provides functionality to estimate emotion from face image.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.Extensions.EmotionEstimator.Labels">
            <summary>
            Gets the collection of emotion label this estimator returns in derived classes.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.EmotionEstimator.RawPredict(DlibDotNet.MatrixBase,FaceRecognitionDotNet.Location)">
            <summary>
            Returns an emotion of face image correspond to specified location in specified image.
            </summary>
            <param name="matrix">The matrix contains a face.</param>
            <param name="location">The location rectangle for a face.</param>
            <returns>An emotion of face image correspond to specified location in specified image.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.EmotionEstimator.RawPredictProbability(DlibDotNet.MatrixBase,FaceRecognitionDotNet.Location)">
            <summary>
            Returns probabilities of emotion of face image correspond to specified location in specified image.
            </summary>
            <param name="matrix">The matrix contains a face.</param>
            <param name="location">The location rectangle for a face.</param>
            <returns>Probabilities of emotion of face image correspond to specified location in specified image.</returns>
        </member>
        <member name="T:FaceRecognitionDotNet.Extensions.EyeAspectRatioBaseEyeBlinkDetector">
            <summary>
            An abstract base class that provides functionality to detect human eye's blink base on eye aspect ratio (EAR).
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.EyeAspectRatioBaseEyeBlinkDetector.#ctor(System.Double,System.Double,System.Int32[],System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:FaceRecognitionDotNet.Extensions.EyeAspectRatioBaseEyeBlinkDetector"/> class with the threshold and eye point indices for left and right eyes.
            </summary>
            <param name="leftRatioThreshold">The threshold to decide that left eye blinks or not.</param>
            <param name="rightRatioThreshold">The threshold to decide that right eye blinks or not.</param>
            <param name="leftEyePointIndices">The indices of left eye location to calculate eye aspect ratio.</param>
            <param name="rightEyePointIndices">The indices of right eye location to calculate eye aspect ratio.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="leftEyePointIndices"/> or <paramref name="rightEyePointIndices"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="leftEyePointIndices"/> or <paramref name="rightEyePointIndices"/> does not contain 6 elements.</exception>
        </member>
        <member name="P:FaceRecognitionDotNet.Extensions.EyeAspectRatioBaseEyeBlinkDetector.LeftEyePointIndices">
            <summary>
            Gets the array of the indices of left eye location to be used calculating eye aspect ratio.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.Extensions.EyeAspectRatioBaseEyeBlinkDetector.LeftRatioThreshold">
            <summary>
            Gets the threshold to decide that left eye blinks or not.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.Extensions.EyeAspectRatioBaseEyeBlinkDetector.RightEyePointIndices">
            <summary>
            Gets the array of the indices of right eye location to be used calculating eye aspect ratio.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.Extensions.EyeAspectRatioBaseEyeBlinkDetector.RightRatioThreshold">
            <summary>
            Gets the threshold to decide that right eye blinks or not.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.EyeAspectRatioBaseEyeBlinkDetector.RawDetect(System.Collections.Generic.IDictionary{FaceRecognitionDotNet.FacePart,System.Collections.Generic.IEnumerable{FaceRecognitionDotNet.FacePoint}},System.Boolean@,System.Boolean@)">
            <summary>
            Detects the values whether human eye's blink or not from face landmark.
            </summary>
            <param name="landmark">The dictionary of face parts locations (eyes, nose, etc).</param>
            <param name="leftBlink">When this method returns, contains <value>true</value>, if the left eye blinks; otherwise, <value>false</value>.</param>
            <param name="rightBlink">When this method returns, contains <value>true</value>, if the right eye blinks; otherwise, <value>false</value>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="landmark"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="landmark"/> does not contain <see cref="F:FaceRecognitionDotNet.FacePart.LeftEye"/> or <see cref="F:FaceRecognitionDotNet.FacePart.RightEye"/>.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.EyeAspectRatioBaseEyeBlinkDetector.GetEar(System.Collections.Generic.IList{FaceRecognitionDotNet.FacePoint},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Return an eye aspect ratio.
            </summary>
            <param name="eye">The collection of location corresponding to human eye.</param>
            <param name="eyePointIndices">The collection of the indices of eye location to be used calculating eye aspect ratio.</param>
            <returns>Eye aspect ratio.</returns>
        </member>
        <member name="T:FaceRecognitionDotNet.Extensions.EyeAspectRatioHelenEyeBlinkDetector">
            <summary>
            The eye blink detector for face landmark which was trained by helen dataset. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.EyeAspectRatioHelenEyeBlinkDetector.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FaceRecognitionDotNet.Extensions.EyeAspectRatioHelenEyeBlinkDetector"/> class with the threshold for left and right eyes.
            </summary>
            <param name="leftRatioThreshold">The threshold to decide that left eye blinks or not.</param>
            <param name="rightRatioThreshold">The threshold to decide that right eye blinks or not.</param>
        </member>
        <member name="T:FaceRecognitionDotNet.Extensions.EyeAspectRatioLargeEyeBlinkDetector">
            <summary>
            The eye blink detector for <see cref="F:FaceRecognitionDotNet.PredictorModel.Large"/>. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.EyeAspectRatioLargeEyeBlinkDetector.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FaceRecognitionDotNet.Extensions.EyeAspectRatioLargeEyeBlinkDetector"/> class with the threshold for left and right eyes.
            </summary>
            <param name="leftRatioThreshold">The threshold to decide that left eye blinks or not.</param>
            <param name="rightRatioThreshold">The threshold to decide that right eye blinks or not.</param>
        </member>
        <member name="T:FaceRecognitionDotNet.Extensions.EyeBlinkDetector">
            <summary>
            An abstract base class that provides functionality to detect human eye's blink from face landmark.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.EyeBlinkDetector.RawDetect(System.Collections.Generic.IDictionary{FaceRecognitionDotNet.FacePart,System.Collections.Generic.IEnumerable{FaceRecognitionDotNet.FacePoint}},System.Boolean@,System.Boolean@)">
            <summary>
            Detects the values whether human eye's blink or not from face landmark.
            </summary>
            <param name="landmark">The dictionary of face parts locations (eyes, nose, etc).</param>
            <param name="leftBlink">When this method returns, contains <value>true</value>, if the left eye blinks; otherwise, <value>false</value>.</param>
            <param name="rightBlink">When this method returns, contains <value>true</value>, if the right eye blinks; otherwise, <value>false</value>.</param>
        </member>
        <member name="T:FaceRecognitionDotNet.Extensions.FaceDetector">
            <summary>
            An abstract base class that provides functionality to detect face locations from image.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.FaceDetector.RawDetect(DlibDotNet.MatrixBase,System.Int32)">
            <summary>
            Returns an enumerable collection of face location correspond to all faces in specified image.
            </summary>
            <param name="matrix">The matrix contains a face.</param>
            <param name="numberOfTimesToUpsample">The number of times to up-sample the image when finding faces.</param>
            <returns>An enumerable collection of face location correspond to all faces.</returns>
        </member>
        <member name="T:FaceRecognitionDotNet.Extensions.FaceLandmarkDetector">
            <summary>
            An abstract base class that provides functionality to detect face parts locations from face image.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.FaceLandmarkDetector.RawDetect(DlibDotNet.MatrixBase,FaceRecognitionDotNet.Location)">
            <summary>
            Returns an object contains information of face parts corresponds to specified location in specified image.
            </summary>
            <param name="matrix">The matrix contains a face.</param>
            <param name="location">The location rectangle for a face.</param>
            <returns>An object contains information of face parts.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.FaceLandmarkDetector.RawGetLandmarks(System.Collections.Generic.IEnumerable{FaceRecognitionDotNet.FacePoint[]})">
            <summary>
            Returns an enumerable collection of dictionary of face parts locations (eyes, nose, etc).
            </summary>
            <param name="landmarkTuples">The enumerable collection of face parts location.</param>
            <returns>An enumerable collection of dictionary of face parts locations (eyes, nose, etc).</returns>
        </member>
        <member name="T:FaceRecognitionDotNet.Extensions.GenderEstimator">
            <summary>
            An abstract base class that provides functionality to estimate human gender from face image.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.Extensions.GenderEstimator.Labels">
            <summary>
            Gets the collection of gender label this estimator returns in derived classes.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.GenderEstimator.RawPredict(DlibDotNet.MatrixBase,FaceRecognitionDotNet.Location)">
            <summary>
            Returns an gender of face image correspond to specified location in specified image.
            </summary>
            <param name="matrix">The matrix contains a face.</param>
            <param name="location">The location rectangle for a face.</param>
            <returns>An gender of face image correspond to specified location in specified image.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.GenderEstimator.RawPredictProbability(DlibDotNet.MatrixBase,FaceRecognitionDotNet.Location)">
            <summary>
            Returns probabilities of gender of face image correspond to specified location in specified image.
            </summary>
            <param name="matrix">The matrix contains a face.</param>
            <param name="location">The location rectangle for a face.</param>
            <returns>Probabilities of gender of face image correspond to specified location in specified image.</returns>
        </member>
        <member name="T:FaceRecognitionDotNet.Extensions.HeadPoseEstimator">
            <summary>
            An abstract base class that provides functionality to estimate human head pose from face landmark.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.HeadPoseEstimator.RawPredict(System.Collections.Generic.IDictionary{FaceRecognitionDotNet.FacePart,System.Collections.Generic.IEnumerable{FaceRecognitionDotNet.FacePoint}})">
            <summary>
            Returns a head pose estimated from face parts locations.
            </summary>
            <param name="landmark">The dictionary of face parts locations (eyes, nose, etc).</param>
            <returns>A head pose estimated from face parts locations.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="landmark"/> is null.</exception>
        </member>
        <member name="T:FaceRecognitionDotNet.Extensions.HelenFaceLandmarkDetector">
            <summary>
            The face landmark detector which was trained by helen dataset. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.HelenFaceLandmarkDetector.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FaceRecognitionDotNet.Extensions.HelenFaceLandmarkDetector"/> class with the model file path that this detector uses.
            </summary>
            <param name="modelPath">The model file path that this detector uses.</param>
            <exception cref="T:System.IO.FileNotFoundException">The model file is not found.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.HelenFaceLandmarkDetector.RawDetect(DlibDotNet.MatrixBase,FaceRecognitionDotNet.Location)">
            <summary>
            Returns an object contains information of face parts corresponds to specified location in specified image.
            </summary>
            <param name="matrix">The matrix contains a face.</param>
            <param name="location">The location rectangle for a face.</param>
            <returns>An object contains information of face parts.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.HelenFaceLandmarkDetector.RawGetLandmarks(System.Collections.Generic.IEnumerable{FaceRecognitionDotNet.FacePoint[]})">
            <summary>
            Returns an enumerable collection of dictionary of face parts locations (eyes, nose, etc).
            </summary>
            <param name="landmarkTuples">The enumerable collection of face parts location.</param>
            <returns>An enumerable collection of dictionary of face parts locations (eyes, nose, etc).</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.HelenFaceLandmarkDetector.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:FaceRecognitionDotNet.Extensions.SimpleAgeEstimator">
            <summary>
            The age estimator which was trained by Adience dataset. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.SimpleAgeEstimator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FaceRecognitionDotNet.Extensions.SimpleAgeEstimator"/> class with the model file path that this estimator uses.
            </summary>
            <param name="modelPath">The model file path that this estimator uses.</param>
            <exception cref="T:System.IO.FileNotFoundException">The model file is not found.</exception>
        </member>
        <member name="P:FaceRecognitionDotNet.Extensions.SimpleAgeEstimator.Groups">
            <summary>
            Gets the collection of age group this estimator returns in derived classes.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.SimpleAgeEstimator.RawPredict(DlibDotNet.MatrixBase,FaceRecognitionDotNet.Location)">
            <summary>
            Returns an index of age group of face image correspond to specified location in specified image.
            </summary>
            <param name="matrix">The matrix contains a face.</param>
            <param name="location">The location rectangle for a face.</param>
            <returns>An index of age group of face image correspond to specified location in specified image.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.SimpleAgeEstimator.RawPredictProbability(DlibDotNet.MatrixBase,FaceRecognitionDotNet.Location)">
            <summary>
            Returns probabilities of age group of face image correspond to specified location in specified image.
            </summary>
            <param name="matrix">The matrix contains a face.</param>
            <param name="location">The location rectangle for a face.</param>
            <returns>Probabilities of age group of face image correspond to specified location in specified image.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.SimpleAgeEstimator.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:FaceRecognitionDotNet.Extensions.SimpleEmotionEstimator">
            <summary>
            The age estimator which was trained by Corrective re-annotation of FER - CK+ - KDEF dataset. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.SimpleEmotionEstimator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FaceRecognitionDotNet.Extensions.SimpleEmotionEstimator"/> class with the model file path that this estimator uses.
            </summary>
            <param name="modelPath">The model file path that this estimator uses.</param>
            <exception cref="T:System.IO.FileNotFoundException">The <paramref name="modelPath"/> file is not found.</exception>
        </member>
        <member name="P:FaceRecognitionDotNet.Extensions.SimpleEmotionEstimator.Labels">
            <summary>
            Gets the collection of emotion label this estimator returns in derived classes.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.SimpleEmotionEstimator.RawPredict(DlibDotNet.MatrixBase,FaceRecognitionDotNet.Location)">
            <summary>
            Returns an emotion of face image correspond to specified location in specified image.
            </summary>
            <param name="matrix">The matrix contains a face.</param>
            <param name="location">The location rectangle for a face.</param>
            <returns>An emotion of face image correspond to specified location in specified image.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.SimpleEmotionEstimator.RawPredictProbability(DlibDotNet.MatrixBase,FaceRecognitionDotNet.Location)">
            <summary>
            Returns probabilities of emotion of face image correspond to specified location in specified image.
            </summary>
            <param name="matrix">The matrix contains a face.</param>
            <param name="location">The location rectangle for a face.</param>
            <returns>Probabilities of emotion of face image correspond to specified location in specified image.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.SimpleEmotionEstimator.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:FaceRecognitionDotNet.Extensions.SimpleFaceDetector">
            <summary>
            The face detector which was trained by custom dataset. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.SimpleFaceDetector.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FaceRecognitionDotNet.Extensions.SimpleFaceDetector"/> class with the model file path that this detector uses.
            </summary>
            <param name="modelPath">The model file path that this detector uses.</param>
            <exception cref="T:System.IO.FileNotFoundException">The model file is not found.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.SimpleFaceDetector.RawDetect(DlibDotNet.MatrixBase,System.Int32)">
            <summary>
            Returns an enumerable collection of face location correspond to all faces in specified image.
            </summary>
            <param name="matrix">The matrix contains a face.</param>
            <param name="numberOfTimesToUpsample">The number of times to up-sample the image when finding faces.</param>
            <returns>An enumerable collection of face location correspond to all faces.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.SimpleFaceDetector.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:FaceRecognitionDotNet.Extensions.SimpleGenderEstimator">
            <summary>
            The age estimator which was trained by UTKFace dataset. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.SimpleGenderEstimator.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FaceRecognitionDotNet.Extensions.SimpleGenderEstimator"/> class with the model file path that this estimator uses.
            </summary>
            <param name="modelPath">The model file path that this estimator uses.</param>
            <exception cref="T:System.IO.FileNotFoundException">The model file is not found.</exception>
        </member>
        <member name="P:FaceRecognitionDotNet.Extensions.SimpleGenderEstimator.Labels">
            <summary>
            Gets the collection of gender label this estimator returns in derived classes.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.SimpleGenderEstimator.RawPredict(DlibDotNet.MatrixBase,FaceRecognitionDotNet.Location)">
            <summary>
            Returns an gender of face image correspond to specified location in specified image.
            </summary>
            <param name="matrix">The matrix contains a face.</param>
            <param name="location">The location rectangle for a face.</param>
            <returns>An gender of face image correspond to specified location in specified image.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.SimpleGenderEstimator.RawPredictProbability(DlibDotNet.MatrixBase,FaceRecognitionDotNet.Location)">
            <summary>
            Returns probabilities of gender of face image correspond to specified location in specified image.
            </summary>
            <param name="matrix">The matrix contains a face.</param>
            <param name="location">The location rectangle for a face.</param>
            <returns>Probabilities of gender of face image correspond to specified location in specified image.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.SimpleGenderEstimator.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:FaceRecognitionDotNet.Extensions.SimpleHeadPoseEstimator">
            <summary>
            The head pose estimator which was trained by 300W-LP dataset. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.SimpleHeadPoseEstimator.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FaceRecognitionDotNet.Extensions.SimpleHeadPoseEstimator"/> class with the model files to estimate head pose.
            </summary>
            <param name="rollModelFile">The model file path to estimate roll angle.</param>
            <param name="pitchModelFile">The model file path to estimate pitch angle.</param>
            <param name="yawModelFile">The model file path to estimate yaw angle.</param>
            <exception cref="T:System.IO.FileNotFoundException"><paramref name="rollModelFile"/>, <paramref name="pitchModelFile"/> or <paramref name="yawModelFile"/> does not exist.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.SimpleHeadPoseEstimator.RawPredict(System.Collections.Generic.IDictionary{FaceRecognitionDotNet.FacePart,System.Collections.Generic.IEnumerable{FaceRecognitionDotNet.FacePoint}})">
            <summary>
            Returns a head pose estimated from face parts locations.
            </summary>
            <param name="landmark">The dictionary of face parts locations (eyes, nose, etc).</param>
            <returns>A head pose estimated from face parts locations.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="landmark"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="landmark"/> does not have 68 points.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.Extensions.SimpleHeadPoseEstimator.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:FaceRecognitionDotNet.FaceEncoding">
            <summary>
            Represents a feature data of face. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.FaceEncoding.Size">
            <summary>
            Gets the size of feature data.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This object is disposed.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceEncoding.GetRawEncoding">
            <summary>
            Gets a feature data of face as raw format.
            </summary>
            <returns>A <see cref="T:System.Double"/> array that represents a feature data.</returns>
            <remarks><see cref="T:FaceRecognitionDotNet.FaceEncoding"/> class supports serialization. This method is for interoperability between FaceRecognitionDotNet and dlib.</remarks>
            <exception cref="T:System.ObjectDisposedException">This object is disposed.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceEncoding.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceEncoding.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization.</param>
        </member>
        <member name="T:FaceRecognitionDotNet.FacePart">
            <summary>
            Specifies the part of face.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.FacePart.Chin">
            <summary>
            Specifies the chin.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.FacePart.LeftEyebrow">
            <summary>
            Specifies the left eyebrow.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.FacePart.RightEyebrow">
            <summary>
            Specifies the right eyebrow.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.FacePart.NoseBridge">
            <summary>
            Specifies the nose bridge.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.FacePart.NoseTip">
            <summary>
            Specifies the nose tip.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.FacePart.LeftEye">
            <summary>
            Specifies the left eye.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.FacePart.RightEye">
            <summary>
            Specifies the right eye.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.FacePart.TopLip">
            <summary>
            Specifies the top lip.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.FacePart.BottomLip">
            <summary>
            Specifies the bottom lip.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.FacePart.Nose">
            <summary>
            Specifies the nose.
            </summary>
        </member>
        <member name="T:FaceRecognitionDotNet.FacePoint">
            <summary>
            Represents an coordinate and index of face parts.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.FacePoint.#ctor(FaceRecognitionDotNet.Point,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FaceRecognitionDotNet.FacePoint"/> class with the specified coordinates and index.
            </summary>
            <param name="point">The coordinate of face parts.</param>
            <param name="index">The index of face parts.</param>
        </member>
        <member name="P:FaceRecognitionDotNet.FacePoint.Point">
            <summary>
            Gets the coordinate of this <see cref="T:FaceRecognitionDotNet.FacePoint"/>.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.FacePoint.Index">
            <summary>
            Gets the index of this <see cref="T:FaceRecognitionDotNet.FacePoint"/>.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.FacePoint.Equals(FaceRecognitionDotNet.FacePoint)">
            <summary>
            Compares two <see cref="T:FaceRecognitionDotNet.FacePoint"/> class for equality.
            </summary>
            <param name="other">The point to compare to this instance.</param>
            <returns><code>true</code> if both <see cref="T:FaceRecognitionDotNet.FacePoint"/> class contain the same <see cref="P:FaceRecognitionDotNet.FacePoint.Point"/> and <see cref="P:FaceRecognitionDotNet.FacePoint.Index"/> values; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.FacePoint.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is a <see cref="T:FaceRecognitionDotNet.FacePoint"/> and whether it contains the same data as this <see cref="T:FaceRecognitionDotNet.FacePoint"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><code>true</code> if <paramref name="obj"/> is a <see cref="T:FaceRecognitionDotNet.FacePoint"/> and contains the same <see cref="P:FaceRecognitionDotNet.FacePoint.Point"/> and <see cref="P:FaceRecognitionDotNet.FacePoint.Index"/> values as this <see cref="T:FaceRecognitionDotNet.FacePoint"/>; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.FacePoint.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:FaceRecognitionDotNet.FacePoint"/>.
            </summary>
            <returns>The hash code for this <see cref="T:FaceRecognitionDotNet.FacePoint"/> class.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.FacePoint.op_Equality(FaceRecognitionDotNet.FacePoint,FaceRecognitionDotNet.FacePoint)">
            <summary>
            Compares two <see cref="T:FaceRecognitionDotNet.FacePoint"/> class for equality.
            </summary>
            <param name="point1">The first <see cref="T:FaceRecognitionDotNet.FacePoint"/> class to compare.</param>
            <param name="point2">The second <see cref="T:FaceRecognitionDotNet.FacePoint"/> class to compare.</param>
            <returns><code>true</code> if both the <see cref="P:FaceRecognitionDotNet.FacePoint.Point"/> and <see cref="P:FaceRecognitionDotNet.FacePoint.Index"/> of <paramref name="point1"/> and <paramref name="point2"/> are equal; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.FacePoint.op_Inequality(FaceRecognitionDotNet.FacePoint,FaceRecognitionDotNet.FacePoint)">
            <summary>
            Compares two <see cref="T:FaceRecognitionDotNet.FacePoint"/> class for inequality.
            </summary>
            <param name="point1">The first <see cref="T:FaceRecognitionDotNet.FacePoint"/> class to compare.</param>
            <param name="point2">The second <see cref="T:FaceRecognitionDotNet.FacePoint"/> class to compare.</param>
            <returns><code>true</code> if <paramref name="point1"/> and <paramref name="point2"/> have different <see cref="P:FaceRecognitionDotNet.FacePoint.Point"/> or <see cref="P:FaceRecognitionDotNet.FacePoint.Index"/>; <code>false</code> if <paramref name="point1"/> and <paramref name="point2"/> have the same <see cref="P:FaceRecognitionDotNet.FacePoint.Point"/> and <see cref="P:FaceRecognitionDotNet.FacePoint.Index"/>.</returns>
        </member>
        <member name="T:FaceRecognitionDotNet.FaceRecognition">
            <summary>
            Provides the method to find and recognize face methods. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FaceRecognitionDotNet.FaceRecognition"/> class with the directory path that stores model files.
            </summary>
            <param name="directory">The directory path that stores model files.</param>
            <exception cref="T:System.IO.FileNotFoundException">The model file is not found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified directory path is not found.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.#ctor(FaceRecognitionDotNet.ModelParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:FaceRecognitionDotNet.FaceRecognition"/> class with the instance that contains model binary datum.
            </summary>
            <param name="parameter">The instance that contains model binary datum.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="parameter"/> is null.</exception>
            <exception cref="T:System.NullReferenceException">The model data is null.</exception>
        </member>
        <member name="P:FaceRecognitionDotNet.FaceRecognition.CustomAgeEstimator">
            <summary>
            Gets or sets the custom age estimator that user defined.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.FaceRecognition.CustomEmotionEstimator">
            <summary>
            Gets or sets the custom emotion estimator that user defined.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.FaceRecognition.CustomEyeBlinkDetector">
            <summary>
            Gets or sets the custom eye blink detector that user defined.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.FaceRecognition.CustomGenderEstimator">
            <summary>
            Gets or sets the custom gender estimator that user defined.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.FaceRecognition.CustomFaceDetector">
            <summary>
            Gets or sets the custom face detector that user defined.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.FaceRecognition.CustomFaceLandmarkDetector">
            <summary>
            Gets or sets the custom face landmark detector that user defined.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.FaceRecognition.CustomHeadPoseEstimator">
            <summary>
            Gets or sets the custom head pose estimator that user defined.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.FaceRecognition.InternalEncoding">
            <summary>
            Gets or sets the character encoding to convert <see cref="T:System.String"/> to array of <see cref="T:System.Byte"/> for internal library.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.BatchFaceLocations(System.Collections.Generic.IEnumerable{FaceRecognitionDotNet.Image},System.Int32,System.Int32)">
            <summary>
            Returns an enumerable collection of array of bounding boxes of human faces in a image using the cnn face detector.
            </summary>
            <param name="images">An enumerable collection of images.</param>
            <param name="numberOfTimesToUpsample">The number of image looking for faces. Higher numbers find smaller faces.</param>
            <param name="batchSize">The number of images to include in each GPU processing batch.</param>
            <returns>An enumerable collection of array of found face locations.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="images"/> is null.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.CompareFace(FaceRecognitionDotNet.FaceEncoding,FaceRecognitionDotNet.FaceEncoding,System.Double)">
            <summary>
            Compare a known face encoding against a candidate encoding to see if they match.
            </summary>
            <param name="knownFaceEncoding">A known face encodings.</param>
            <param name="faceEncodingToCheck">A single face encoding to compare against a known face encoding.</param>
            <param name="tolerance">The distance between faces to consider it a match. Lower is more strict. The default value is 0.6.</param>
            <returns>A True/False value indicating which known a face encoding matches the face encoding to check.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="knownFaceEncoding"/> or <paramref name="faceEncodingToCheck"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="knownFaceEncoding"/> or <paramref name="faceEncodingToCheck"/>.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.CompareFaces(System.Collections.Generic.IEnumerable{FaceRecognitionDotNet.FaceEncoding},FaceRecognitionDotNet.FaceEncoding,System.Double)">
            <summary>
            Compare an enumerable collection of face encodings against a candidate encoding to see if they match.
            </summary>
            <param name="knownFaceEncodings">An enumerable collection of known face encodings.</param>
            <param name="faceEncodingToCheck">A single face encoding to compare against the enumerable collection.</param>
            <param name="tolerance">The distance between faces to consider it a match. Lower is more strict. The default value is 0.6.</param>
            <returns>An enumerable collection of True/False values indicating which known face encodings match the face encoding to check.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="knownFaceEncodings"/> or <paramref name="faceEncodingToCheck"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="faceEncodingToCheck"/> is disposed. Or <paramref name="knownFaceEncodings"/> contains disposed object.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.Create(System.String)">
            <summary>
            Create a new instance of the <see cref="T:FaceRecognitionDotNet.FaceRecognition"/> class.
            </summary>
            <param name="directory">The directory path that stores model files.</param>
            <exception cref="T:System.IO.FileNotFoundException">The model file is not found.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified directory path is not found.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.Create(FaceRecognitionDotNet.ModelParameter)">
            <summary>
            Create a new instance of the <see cref="T:FaceRecognitionDotNet.FaceRecognition"/> class.
            </summary>
            <param name="parameter">The instance that contains model binary datum.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="parameter"/> is null.</exception>
            <exception cref="T:System.NullReferenceException">The model data is null.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.CropFaces(FaceRecognitionDotNet.Image,System.Collections.Generic.IEnumerable{FaceRecognitionDotNet.Location})">
            <summary>
            Crop a specified image with enumerable collection of face locations.
            </summary>
            <param name="image">The image contains a face.</param>
            <param name="locations">The enumerable collection of location rectangle for faces.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or <paramref name="locations"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="image"/> is disposed.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.EyeBlinkDetect(System.Collections.Generic.IDictionary{FaceRecognitionDotNet.FacePart,System.Collections.Generic.IEnumerable{FaceRecognitionDotNet.FacePoint}},System.Boolean@,System.Boolean@)">
            <summary>
            Detects the values whether human eye's blink or not from face landmark.
            </summary>
            <param name="landmark">The dictionary of face parts locations (eyes, nose, etc).</param>
            <param name="leftBlink">When this method returns, contains <value>true</value>, if the left eye blinks; otherwise, <value>false</value>.</param>
            <param name="rightBlink">When this method returns, contains <value>true</value>, if the right eye blinks; otherwise, <value>false</value>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="landmark"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="landmark"/> does not contain <see cref="F:FaceRecognitionDotNet.FacePart.LeftEye"/> or <see cref="F:FaceRecognitionDotNet.FacePart.RightEye"/>.</exception>
            <exception cref="T:System.NotSupportedException">The custom eye blink detector is not ready.</exception>
            <exception cref="T:System.ObjectDisposedException">This object or custom eye blink detector is disposed.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.FaceDistance(FaceRecognitionDotNet.FaceEncoding,FaceRecognitionDotNet.FaceEncoding)">
            <summary>
            Compare a face encoding to a known face encoding and get a euclidean distance for comparison face.
            </summary>
            <param name="faceEncoding">The face encoding to compare.</param>
            <param name="faceToCompare">The face encoding to compare against.</param>
            <returns>The euclidean distance for comparison face. If 0, faces are completely equal.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="faceEncoding"/> or <paramref name="faceToCompare"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="faceEncoding"/> or <paramref name="faceToCompare"/> is disposed.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.FaceDistances(System.Collections.Generic.IEnumerable{FaceRecognitionDotNet.FaceEncoding},FaceRecognitionDotNet.FaceEncoding)">
            <summary>
            Compare an enumerable collection of face encoding to a known face encoding and get an enumerable collection of euclidean distance for comparison face.
            </summary>
            <param name="faceEncodings">The enumerable collection of face encoding to compare.</param>
            <param name="faceToCompare">The face encoding to compare against.</param>
            <returns>The enumerable collection of euclidean distance for comparison face. If 0, faces are completely equal.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="faceEncodings"/> or <paramref name="faceToCompare"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="faceToCompare"/> is disposed. Or <paramref name="faceEncodings"/> contains disposed object.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.FaceEncodings(FaceRecognitionDotNet.Image,System.Collections.Generic.IEnumerable{FaceRecognitionDotNet.Location},System.Int32,FaceRecognitionDotNet.PredictorModel,FaceRecognitionDotNet.Model)">
            <summary>
            Returns an enumerable collection of face feature data corresponds to all faces in specified image.
            </summary>
            <param name="image">The image contains faces. The image can contain multiple faces.</param>
            <param name="knownFaceLocation">The enumerable collection of location rectangle for faces. If specified null, method will find face locations.</param>
            <param name="numJitters">The number of times to re-sample the face when calculating encoding.</param>
            <param name="predictorModel">The dimension of vector which be returned from detector.</param>
            <param name="model">The model of face detector to detect in image. If <paramref name="knownFaceLocation"/> is not null, this value is ignored.</param>
            <returns>An enumerable collection of face feature data corresponds to all faces in specified image.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="knownFaceLocation"/> contains no elements.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="image"/> or this object or custom face landmark detector is disposed.</exception>
            <exception cref="T:System.NotSupportedException"><see cref="F:FaceRecognitionDotNet.PredictorModel.Custom"/> is not supported.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.FaceLandmark(FaceRecognitionDotNet.Image,System.Collections.Generic.IEnumerable{FaceRecognitionDotNet.Location},FaceRecognitionDotNet.PredictorModel,FaceRecognitionDotNet.Model)">
            <summary>
            Returns an enumerable collection of dictionary of face parts locations (eyes, nose, etc) for each face in the image.
            </summary>
            <param name="faceImage">The image contains faces. The image can contain multiple faces.</param>
            <param name="faceLocations">The enumerable collection of location rectangle for faces. If specified null, method will find face locations.</param>
            <param name="predictorModel">The dimension of vector which be returned from detector.</param>
            <param name="model">The model of face detector to detect in image. If <paramref name="faceLocations"/> is not null, this value is ignored.</param>
            <returns>An enumerable collection of dictionary of face parts locations (eyes, nose, etc).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="faceImage"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="faceLocations"/> contains no elements.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="faceImage"/> or this object or custom face landmark detector is disposed.</exception>
            <exception cref="T:System.NotSupportedException">The custom face landmark detector is not ready.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.FaceLocations(FaceRecognitionDotNet.Image,System.Int32,FaceRecognitionDotNet.Model)">
            <summary>
            Returns an enumerable collection of face location correspond to all faces in specified image.
            </summary>
            <param name="image">The image contains faces. The image can contain multiple faces.</param>
            <param name="numberOfTimesToUpsample">The number of times to up-sample the image when finding faces.</param>
            <param name="model">The model of face detector to detect in image.</param>
            <returns>An enumerable collection of face location correspond to all faces in specified image.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="image"/> or this object is disposed.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.LoadFaceEncoding(System.Double[])">
            <summary>
            Creates an <see cref="T:FaceRecognitionDotNet.FaceEncoding"/> from the <see cref="T:System.Double"/> array.
            </summary>
            <param name="encoding">The <see cref="T:System.Double"/> array contains face encoding data.</param>
            <returns>The <see cref="T:FaceRecognitionDotNet.FaceEncoding"/> this method creates.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="encoding"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="encoding"/> must be 128.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.LoadImage(System.Drawing.Bitmap)">
            <summary>
            Creates an <see cref="T:FaceRecognitionDotNet.Image"/> from the specified existing bitmap image.
            </summary>
            <param name="bitmap">The <see cref="T:System.Drawing.Bitmap"/> from which to create the new <see cref="T:FaceRecognitionDotNet.Image"/>.</param>
            <returns>The <see cref="T:FaceRecognitionDotNet.Image"/> this method creates.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bitmap"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified <see cref="T:System.Drawing.Imaging.PixelFormat"/> is not supported.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.LoadImage(System.Byte[],System.Int32,System.Int32,System.Int32,FaceRecognitionDotNet.Mode)">
            <summary>
            Creates an <see cref="T:FaceRecognitionDotNet.Image"/> from the <see cref="T:System.Byte"/> array.
            </summary>
            <param name="array">The <see cref="T:System.Byte"/> array contains image data.</param>
            <param name="row">The number of rows in a image data.</param>
            <param name="column">The number of columns in a image data.</param>
            <param name="stride">The stride width in bytes.</param>
            <param name="mode">A image color mode.</param>
            <returns>The <see cref="T:FaceRecognitionDotNet.Image"/> this method creates.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="row"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="column"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="stride"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="stride"/> is less than <paramref name="column"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="row"/> x <paramref name="stride"/> is less than <see cref="P:System.Array.Length"/>.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.LoadImage(System.IntPtr,System.Int32,System.Int32,System.Int32,FaceRecognitionDotNet.Mode)">
            <summary>
            Creates an <see cref="T:FaceRecognitionDotNet.Image"/> from the unmanaged memory pointer indicates <see cref="T:System.Byte"/> array image data.
            </summary>
            <param name="array">The unmanaged memory pointer indicates <see cref="T:System.Byte"/> array image data.</param>
            <param name="row">The number of rows in a image data.</param>
            <param name="column">The number of columns in a image data.</param>
            <param name="stride">The stride width in bytes.</param>
            <param name="mode">A image color mode.</param>
            <returns>The <see cref="T:FaceRecognitionDotNet.Image"/> this method creates.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is <see cref="F:System.IntPtr.Zero"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="row"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="column"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="stride"/> is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="stride"/> is less than <paramref name="column"/>.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.LoadImageFile(System.String,FaceRecognitionDotNet.Mode)">
            <summary>
            Creates an <see cref="T:FaceRecognitionDotNet.Image"/> from the specified path.
            </summary>
            <param name="file">A string that contains the path of the file from which to create the <see cref="T:FaceRecognitionDotNet.Image"/>.</param>
            <param name="mode">A image color mode.</param>
            <returns>The <see cref="T:FaceRecognitionDotNet.Image"/> this method creates.</returns>
            <exception cref="T:System.IO.FileNotFoundException">The specified path does not exist.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.PredictAge(FaceRecognitionDotNet.Image,FaceRecognitionDotNet.Location)">
            <summary>
            Returns an index of age group of face image correspond to specified location in specified image.
            </summary>
            <param name="image">The image contains a face.</param>
            <param name="location">The location rectangle for a face.</param>
            <returns>An index of age group of face image correspond to specified location in specified image.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or <paramref name="location"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="image"/> or this object or custom age estimator is disposed.</exception>
            <exception cref="T:System.NotSupportedException">The custom age estimator is not ready.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.PredictEmotion(FaceRecognitionDotNet.Image,FaceRecognitionDotNet.Location)">
            <summary>
            Returns an emotion of face image correspond to specified location in specified image.
            </summary>
            <param name="image">The image contains a face.</param>
            <param name="location">The location rectangle for a face.</param>
            <returns>An emotion of face image correspond to specified location in specified image.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or <paramref name="location"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="image"/> or this object or custom emotion estimator is disposed.</exception>
            <exception cref="T:System.NotSupportedException">The custom emotion estimator is not ready.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.PredictGender(FaceRecognitionDotNet.Image,FaceRecognitionDotNet.Location)">
            <summary>
            Returns an gender of face image correspond to specified location in specified image.
            </summary>
            <param name="image">The image contains a face.</param>
            <param name="location">The location rectangle for a face.</param>
            <returns>An gender of face image correspond to specified location in specified image.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or <paramref name="location"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="image"/> or this object or custom gender estimator is disposed.</exception>
            <exception cref="T:System.NotSupportedException">The custom gender estimator is not ready.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.PredictProbabilityAge(FaceRecognitionDotNet.Image,FaceRecognitionDotNet.Location)">
            <summary>
            Returns probabilities of age group of face image correspond to specified location in specified image.
            </summary>
            <param name="image">The image contains a face.</param>
            <param name="location">The location rectangle for a face.</param>
            <returns>Probabilities of age group of face image correspond to specified location in specified image.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or <paramref name="location"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="image"/> or this object or custom age estimator is disposed.</exception>
            <exception cref="T:System.NotSupportedException">The custom age estimator is not ready.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.PredictProbabilityEmotion(FaceRecognitionDotNet.Image,FaceRecognitionDotNet.Location)">
            <summary>
            Returns probabilities of emotion of face image correspond to specified location in specified image.
            </summary>
            <param name="image">The image contains a face.</param>
            <param name="location">The location rectangle for a face.</param>
            <returns>Probabilities of emotion of face image correspond to specified location in specified image.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or <paramref name="location"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="image"/> or this object or custom emotion estimator is disposed.</exception>
            <exception cref="T:System.NotSupportedException">The custom emotion estimator is not ready.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.PredictProbabilityGender(FaceRecognitionDotNet.Image,FaceRecognitionDotNet.Location)">
            <summary>
            Returns probabilities of gender of face image correspond to specified location in specified image.
            </summary>
            <param name="image">The image contains a face.</param>
            <param name="location">The location rectangle for a face.</param>
            <returns>Probabilities of gender of face image correspond to specified location in specified image.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="image"/> or <paramref name="location"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException"><paramref name="image"/> or this object or custom gender estimator is disposed.</exception>
            <exception cref="T:System.NotSupportedException">The custom gender estimator is not ready.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.PredictHeadPose(System.Collections.Generic.IDictionary{FaceRecognitionDotNet.FacePart,System.Collections.Generic.IEnumerable{FaceRecognitionDotNet.FacePoint}})">
            <summary>
            Returns a head pose estimated from face parts locations.
            </summary>
            <param name="landmark">The dictionary of face parts locations (eyes, nose, etc).</param>
            <returns>A head pose estimated from face parts locations.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="landmark"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">This object or custom head pose estimator is disposed.</exception>
            <exception cref="T:System.NotSupportedException">The custom head pose estimator is not ready.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.FaceRecognition.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:FaceRecognitionDotNet.Gender">
            <summary>
            Specifies the gender.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.Gender.Female">
            <summary>
            Specifies that the female.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.Gender.Male">
            <summary>
            Specifies that the male.
            </summary>
        </member>
        <member name="T:FaceRecognitionDotNet.HeadPose">
            <summary>
            Represents an head pose.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.HeadPose.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FaceRecognitionDotNet.HeadPose"/> class with the specified roll, pitch and yaw.
            </summary>
            <param name="roll">The roll angle.</param>
            <param name="pitch">The pitch angle.</param>
            <param name="yaw">The yaw angle.</param>
        </member>
        <member name="P:FaceRecognitionDotNet.HeadPose.Pitch">
            <summary>
            Gets the pitch angle of this <see cref="T:FaceRecognitionDotNet.HeadPose"/>.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.HeadPose.Roll">
            <summary>
            Gets the roll angle of this <see cref="T:FaceRecognitionDotNet.HeadPose"/>.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.HeadPose.Yaw">
            <summary>
            Gets the yaw angle of this <see cref="T:FaceRecognitionDotNet.HeadPose"/>.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.HeadPose.Equals(FaceRecognitionDotNet.HeadPose)">
            <summary>
            Compares two <see cref="T:FaceRecognitionDotNet.HeadPose"/> class for equality.
            </summary>
            <param name="other">The pose to compare to this instance.</param>
            <returns><code>true</code> if both <see cref="T:FaceRecognitionDotNet.HeadPose"/> class contain the same <see cref="P:FaceRecognitionDotNet.HeadPose.Roll"/>, <see cref="P:FaceRecognitionDotNet.HeadPose.Pitch"/> and <see cref="P:FaceRecognitionDotNet.HeadPose.Yaw"/> values; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.HeadPose.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is a <see cref="T:FaceRecognitionDotNet.HeadPose"/> and whether it contains the same data as this <see cref="T:FaceRecognitionDotNet.HeadPose"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><code>true</code> if <paramref name="obj"/> is a <see cref="T:FaceRecognitionDotNet.HeadPose"/> and contains the same <see cref="P:FaceRecognitionDotNet.HeadPose.Roll"/>, <see cref="P:FaceRecognitionDotNet.HeadPose.Pitch"/> and <see cref="P:FaceRecognitionDotNet.HeadPose.Yaw"/> values as this <see cref="T:FaceRecognitionDotNet.HeadPose"/>; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.HeadPose.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:FaceRecognitionDotNet.HeadPose"/>.
            </summary>
            <returns>The hash code for this <see cref="T:FaceRecognitionDotNet.HeadPose"/> structure.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.HeadPose.op_Equality(FaceRecognitionDotNet.HeadPose,FaceRecognitionDotNet.HeadPose)">
            <summary>
            Compares two <see cref="T:FaceRecognitionDotNet.HeadPose"/> class for equality.
            </summary>
            <param name="pose1">The first <see cref="T:FaceRecognitionDotNet.HeadPose"/> structure to compare.</param>
            <param name="pose2">The second <see cref="T:FaceRecognitionDotNet.HeadPose"/> structure to compare.</param>
            <returns><code>true</code> if the <see cref="P:FaceRecognitionDotNet.HeadPose.Roll"/>, <see cref="P:FaceRecognitionDotNet.HeadPose.Pitch"/> and <see cref="P:FaceRecognitionDotNet.HeadPose.Yaw"/> of <paramref name="pose1"/> and <paramref name="pose2"/> are equal; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.HeadPose.op_Inequality(FaceRecognitionDotNet.HeadPose,FaceRecognitionDotNet.HeadPose)">
            <summary>
            Compares two <see cref="T:FaceRecognitionDotNet.HeadPose"/> class for inequality.
            </summary>
            <param name="pose1">The first <see cref="T:FaceRecognitionDotNet.HeadPose"/> structure to compare.</param>
            <param name="pose2">The second <see cref="T:FaceRecognitionDotNet.HeadPose"/> structure to compare.</param>
            <returns><code>true</code> if <paramref name="pose1"/> and <paramref name="pose2"/> have different <see cref="P:FaceRecognitionDotNet.HeadPose.Roll"/> or <see cref="P:FaceRecognitionDotNet.HeadPose.Yaw"/>; <code>false</code> if <paramref name="pose1"/> and <paramref name="pose2"/> have the same <see cref="P:FaceRecognitionDotNet.HeadPose.Roll"/>, <see cref="P:FaceRecognitionDotNet.HeadPose.Pitch"/> and <see cref="P:FaceRecognitionDotNet.HeadPose.Yaw"/>.</returns>
        </member>
        <member name="T:FaceRecognitionDotNet.Image">
            <summary>
            Represents a image data. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.Image.Height">
            <summary>
            Gets the height of the image.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This object is disposed.</exception>
        </member>
        <member name="P:FaceRecognitionDotNet.Image.Width">
            <summary>
            Gets the width of the image.
            </summary>
            <exception cref="T:System.ObjectDisposedException">This object is disposed.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.Image.Save(System.String,FaceRecognitionDotNet.ImageFormat)">
            <summary>
            Saves this <see cref="T:FaceRecognitionDotNet.Image"/> to the specified file.
            </summary>
            <param name="filename">A string that contains the name of the file to which to save this <see cref="T:FaceRecognitionDotNet.Image"/>.</param>
            <param name="format">The <see cref="T:FaceRecognitionDotNet.ImageFormat"/> for this <see cref="T:FaceRecognitionDotNet.Image"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is null.</exception>
            <exception cref="T:System.ObjectDisposedException">This object is disposed.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.Image.ToBitmap">
            <summary>
            Converts this <see cref="T:FaceRecognitionDotNet.Image"/> to a GDI+ <see cref="T:System.Drawing.Bitmap"/>.
            </summary>
            <returns>A <see cref="T:System.Drawing.Bitmap"/> that represents the converted <see cref="T:FaceRecognitionDotNet.Image"/>.</returns>
            <exception cref="T:System.ObjectDisposedException">This object is disposed.</exception>
            <exception cref="T:System.NotSupportedException">A Greyscale image is not supported.</exception>
        </member>
        <member name="M:FaceRecognitionDotNet.Image.DisposeUnmanaged">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="T:FaceRecognitionDotNet.ImageFormat">
            <summary>
            Specifies the file format of the image.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.ImageFormat.Bmp">
            <summary>
            Specifies that the bitmap (BMP) image format.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.ImageFormat.Jpeg">
            <summary>
            Specifies that the Joint Photographic Experts Group (JPEG) image format.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.ImageFormat.Png">
            <summary>
            Specifies that the W3C Portable Network Graphics (PNG) image format.
            </summary>
        </member>
        <member name="T:FaceRecognitionDotNet.Location">
            <summary>
            Describes the left, top, right and bottom location of a face. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Location.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FaceRecognitionDotNet.Location"/> structure with the specified left, top, right and bottom.
            </summary>
            <param name="left">The x-axis value of the left side of the rectangle of face.</param>
            <param name="top">The y-axis value of the top of the rectangle of face.</param>
            <param name="right">The x-axis value of the right side of the rectangle of face.</param>
            <param name="bottom">The y-axis value of the bottom of the rectangle of face.</param>
        </member>
        <member name="M:FaceRecognitionDotNet.Location.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FaceRecognitionDotNet.Location"/> structure with the specified left, top, right, bottom and confidence.
            </summary>
            <param name="left">The x-axis value of the left side of the rectangle of face.</param>
            <param name="top">The y-axis value of the top of the rectangle of face.</param>
            <param name="right">The x-axis value of the right side of the rectangle of face.</param>
            <param name="bottom">The y-axis value of the bottom of the rectangle of face.</param>
            <param name="confidence">The confidence of detected face.</param>
        </member>
        <member name="M:FaceRecognitionDotNet.Location.#ctor(DlibDotNet.Rectangle,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FaceRecognitionDotNet.Location"/> structure with the specified rectangle and confidence.
            </summary>
            <param name="rectangle">The rectangle of face.</param>
            <param name="confidence">The confidence of detected face.</param>
        </member>
        <member name="M:FaceRecognitionDotNet.Location.#ctor(FaceRecognitionDotNet.Location,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:FaceRecognitionDotNet.Location"/> structure with the specified location and confidence.
            </summary>
            <param name="location">The location of face.</param>
            <param name="confidence">The confidence of detected face.</param>
        </member>
        <member name="P:FaceRecognitionDotNet.Location.Bottom">
            <summary>
            Gets the y-axis value of the bottom of the rectangle of face.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.Location.Confidence">
            <summary>
            Gets the confidence of detected face.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.Location.Left">
            <summary>
            Gets the x-axis value of the left side of the rectangle of face.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.Location.Right">
            <summary>
            Gets the x-axis value of the right side of the rectangle of face.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.Location.Top">
            <summary>
            Gets the y-axis value of the top of the rectangle of face.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Location.Equals(FaceRecognitionDotNet.Location)">
            <summary>
            Compares two <see cref="T:FaceRecognitionDotNet.Location"/> class for equality.
            </summary>
            <param name="other">The face location to compare to this instance.</param>
            <returns><code>true</code> if both <see cref="T:FaceRecognitionDotNet.Location"/> class contain the same <see cref="P:FaceRecognitionDotNet.Location.Left"/>, <see cref="P:FaceRecognitionDotNet.Location.Top"/>, <see cref="P:FaceRecognitionDotNet.Location.Right"/> and <see cref="P:FaceRecognitionDotNet.Location.Bottom"/> values; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Location.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is a <see cref="T:FaceRecognitionDotNet.Location"/> and whether it contains the same face location as this <see cref="T:FaceRecognitionDotNet.Location"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><code>true</code> if <paramref name="obj"/> is a <see cref="T:FaceRecognitionDotNet.Location"/> and contains the same <see cref="P:FaceRecognitionDotNet.Location.Left"/>, <see cref="P:FaceRecognitionDotNet.Location.Top"/>, <see cref="P:FaceRecognitionDotNet.Location.Right"/> and <see cref="P:FaceRecognitionDotNet.Location.Bottom"/> values as this <see cref="T:FaceRecognitionDotNet.Location"/>; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Location.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:FaceRecognitionDotNet.Location"/>.
            </summary>
            <returns>The hash code for this <see cref="T:FaceRecognitionDotNet.Location"/> class.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Location.op_Equality(FaceRecognitionDotNet.Location,FaceRecognitionDotNet.Location)">
            <summary>
            Compares two <see cref="T:FaceRecognitionDotNet.Location"/> class for equality.
            </summary>
            <param name="location1">The first <see cref="T:FaceRecognitionDotNet.Location"/> class to compare.</param>
            <param name="location2">The second <see cref="T:FaceRecognitionDotNet.Location"/> class to compare.</param>
            <returns><code>true</code> if both the <see cref="P:FaceRecognitionDotNet.Location.Left"/>, <see cref="P:FaceRecognitionDotNet.Location.Top"/>, <see cref="P:FaceRecognitionDotNet.Location.Right"/> and <see cref="P:FaceRecognitionDotNet.Location.Bottom"/> face location of <paramref name="location1"/> and <paramref name="location2"/> are equal; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Location.op_Inequality(FaceRecognitionDotNet.Location,FaceRecognitionDotNet.Location)">
            <summary>
            Compares two <see cref="T:FaceRecognitionDotNet.Location"/> class for inequality.
            </summary>
            <param name="location1">The first <see cref="T:FaceRecognitionDotNet.Location"/> class to compare.</param>
            <param name="location2">The second <see cref="T:FaceRecognitionDotNet.Location"/> class to compare.</param>
            <returns><code>true</code> if <paramref name="location1"/> and <paramref name="location2"/> have different <see cref="P:FaceRecognitionDotNet.Location.Left"/>, <see cref="P:FaceRecognitionDotNet.Location.Top"/>, <see cref="P:FaceRecognitionDotNet.Location.Right"/> or <see cref="P:FaceRecognitionDotNet.Location.Bottom"/> coordinates; <code>false</code> if <paramref name="location1"/> and <paramref name="location2"/> have the same <see cref="P:FaceRecognitionDotNet.Location.Left"/>, <see cref="P:FaceRecognitionDotNet.Location.Top"/>, <see cref="P:FaceRecognitionDotNet.Location.Right"/> and <see cref="P:FaceRecognitionDotNet.Location.Bottom"/> face location.</returns>
        </member>
        <member name="T:FaceRecognitionDotNet.Mode">
            <summary>
            Specifies the image mode.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.Mode.Rgb">
            <summary>
            Specifies that the rgb (8-bit Red, Green and Blue, 3 channels) image mode.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.Mode.Greyscale">
            <summary>
            Specifies that the greyscale image mode.
            </summary>
        </member>
        <member name="T:FaceRecognitionDotNet.Model">
            <summary>
            Specifies the model of face detector.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.Model.Hog">
            <summary>
            Specifies that the model is HOG (Histograms of Oriented Gradients) based face detector.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.Model.Cnn">
            <summary>
            Specifies that the model is CNN (Convolutional Neural Network) based face detector.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.Model.Custom">
            <summary>
            Specifies that the custom face detector.
            </summary>
        </member>
        <member name="T:FaceRecognitionDotNet.ModelParameter">
            <summary>
            Describes the model binary datum. This class cannot be inherited.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.ModelParameter.PosePredictor68FaceLandmarksModel">
            <summary>
            Gets or sets the binary data of model for 68 points face landmarks.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.ModelParameter.PosePredictor5FaceLandmarksModel">
            <summary>
            Gets or sets the binary data of model for 5 points face landmarks.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.ModelParameter.FaceRecognitionModel">
            <summary>
            Gets or sets the binary data of model for face encoding.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.ModelParameter.CnnFaceDetectorModel">
            <summary>
            Gets or sets the binary data of model for face detector by using CNN.
            </summary>
        </member>
        <member name="T:FaceRecognitionDotNet.Point">
            <summary>
            Represents an ordered pair of integer x- and y-coordinates that defines a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:FaceRecognitionDotNet.Point"/> structure with the specified coordinates.
            </summary>
            <param name="x">The horizontal position of the point.</param>
            <param name="y">The vertical position of the point.</param>
        </member>
        <member name="P:FaceRecognitionDotNet.Point.X">
            <summary>
            Gets the x-coordinate of this <see cref="T:FaceRecognitionDotNet.Point"/>.
            </summary>
        </member>
        <member name="P:FaceRecognitionDotNet.Point.Y">
            <summary>
            Gets the y-coordinate of this <see cref="T:FaceRecognitionDotNet.Point"/>.
            </summary>
        </member>
        <member name="M:FaceRecognitionDotNet.Point.Equals(FaceRecognitionDotNet.Point)">
            <summary>
            Compares two <see cref="T:FaceRecognitionDotNet.Point"/> structures for equality.
            </summary>
            <param name="other">The point to compare to this instance.</param>
            <returns><code>true</code> if both <see cref="T:FaceRecognitionDotNet.Point"/> structures contain the same <see cref="P:FaceRecognitionDotNet.Point.X"/> and <see cref="P:FaceRecognitionDotNet.Point.Y"/> values; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Point.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is a <see cref="T:FaceRecognitionDotNet.Point"/> and whether it contains the same coordinates as this <see cref="T:FaceRecognitionDotNet.Point"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare.</param>
            <returns><code>true</code> if <paramref name="obj"/> is a <see cref="T:FaceRecognitionDotNet.Point"/> and contains the same <see cref="P:FaceRecognitionDotNet.Point.X"/> and <see cref="P:FaceRecognitionDotNet.Point.Y"/> values as this <see cref="T:FaceRecognitionDotNet.Point"/>; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Point.GetHashCode">
            <summary>
            Returns the hash code for this <see cref="T:FaceRecognitionDotNet.Point"/>.
            </summary>
            <returns>The hash code for this <see cref="T:FaceRecognitionDotNet.Point"/> structure.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Point.op_Equality(FaceRecognitionDotNet.Point,FaceRecognitionDotNet.Point)">
            <summary>
            Compares two <see cref="T:FaceRecognitionDotNet.Point"/> structures for equality.
            </summary>
            <param name="point1">The first <see cref="T:FaceRecognitionDotNet.Point"/> structure to compare.</param>
            <param name="point2">The second <see cref="T:FaceRecognitionDotNet.Point"/> structure to compare.</param>
            <returns><code>true</code> if both the <see cref="P:FaceRecognitionDotNet.Point.X"/> and <see cref="P:FaceRecognitionDotNet.Point.Y"/> coordinates of <paramref name="point1"/> and <paramref name="point2"/> are equal; otherwise, <code>false</code>.</returns>
        </member>
        <member name="M:FaceRecognitionDotNet.Point.op_Inequality(FaceRecognitionDotNet.Point,FaceRecognitionDotNet.Point)">
            <summary>
            Compares two <see cref="T:FaceRecognitionDotNet.Point"/> structures for inequality.
            </summary>
            <param name="point1">The first <see cref="T:FaceRecognitionDotNet.Point"/> structure to compare.</param>
            <param name="point2">The second <see cref="T:FaceRecognitionDotNet.Point"/> structure to compare.</param>
            <returns><code>true</code> if <paramref name="point1"/> and <paramref name="point2"/> have different <see cref="P:FaceRecognitionDotNet.Point.X"/> or <see cref="P:FaceRecognitionDotNet.Point.Y"/> coordinates; <code>false</code> if <paramref name="point1"/> and <paramref name="point2"/> have the same <see cref="P:FaceRecognitionDotNet.Point.X"/> and <see cref="P:FaceRecognitionDotNet.Point.Y"/> coordinates.</returns>
        </member>
        <member name="T:FaceRecognitionDotNet.PredictorModel">
            <summary>
            Specifies the dimension of vector which be returned from detector.
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.PredictorModel.Large">
            <summary>
            Specifies that the large scale detector. The detector returns 68 points for represent face. 
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.PredictorModel.Small">
            <summary>
            Specifies that the small scale detector. The detector returns 5 points for represent face. 
            </summary>
        </member>
        <member name="F:FaceRecognitionDotNet.PredictorModel.Custom">
            <summary>
            Specifies that the custom detector.
            </summary>
        </member>
    </members>
</doc>
